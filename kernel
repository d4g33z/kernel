#! /usr/bin/env sh

set -f

fullcmd=`command -v -- "${0}"`
fullpath=`readlink -f -- "${fullcmd}" 2>/dev/null` || case ${fullcmd} in
/*)	fullpath=${fullcmd};;
*)	fullpath=${PWD%/}/${fullcmd#./};;
esac

if command -v eix-functions.sh >/dev/null 2>&1
then	. eix-functions.sh
else	ReadVar() {
	read_var=`portageq envvar ${2}` || read_var=
	eval ${1}=\${read_var}
	[ -n "${read_var:++}" ]
}
fi
Push() {
	. push.sh
	Push "${@}"
}

Exit() {
	exit ${1}
}

magicquit=130
magicforce=65
Title() {
Title() {
:
}
	case ${titleopt} in
	*-*)	return;;
	esac
	command -v title >/dev/null 2>&1 || return 0
Exit() {
	exitstat=${1:-${?}}
	trap - EXIT HUP INT TERM
	[ ${#} -gt 1 ] && exit ${exitstat}
	if [ ${exitstat} -eq 0 ]
	then	Title "${0##*/}: finish"
	elif [ ${exitstat} -eq ${magicforce} ] || [ ${exitstat} -eq ${magicquit} ]
	then	Title "${0##*/}: remote finish"
	else	Title "${0##*/}: failure"
	fi
	exit ${exitstat}
}
TitleTrap() {
	trap : EXIT HUP INT TERM
	Title "${0##*/} interrupt"
	trap - EXIT HUP INT TERM
	exit ${magicquit}
}
	trap TitleTrap EXIT HUP INT TERM
TitleInit() {
. title "${@}"
}
	TitleInit ${titleopt:+"-${titleopt}"} -- "${@}"
}

TitleInfo() {
	Title "${0##*/}: ${*}"
}

Echo() {
	printf '%s\n' "${*}"
}

Echon() {
	printf '%s' "${*}"
}

Warning() {
	Echo "${0##*/}: warning: ${*}" >&2
}

Info() {
	printf '### %s\n' "${@}"
}

Fatal() {
	Echo "${0##*/}: ${*}" >&2
	Exit 2
}

Quote() {
	Push -c q "${@}"
	Echo "# ${q}"
}

QuoteExec() {
	Quote "${@}"
	"${@}"
}

MyDiff() {
	TitleInfo 'diff'
	diffa="${KBUILD_OUTPUT}/.config.old"
	diffb="${KBUILD_OUTPUT}/.config"
	test -f "${diffa}" && test -f "${diffb}" || return 0
	diffd=diff
	command -v colordiff >/dev/null 2>&1 && diffd=colordiff
	QuoteExec "${diffd}" -- "${diffa}" "${diffb}"
}

Usage() {
	Echo "Usage: ${0##*/} [options]
This script will compile and install the kernel and kernelmodules
(asking at each step what should be done).
The following options are available:

  -f (force) always assume 'yes'. You might want to combine this with:
  -p       use oldconfig

  -n       use nconfig    (resp. do not ask for other *config)
  -x       use xconfig    (resp. do not ask for other *config)
  -m       use menuconfig (resp. do not ask for other *config)
  -g       use gconfig    (resp. do not ask for other *config)
  -N       use no config  (resp. do not ask for *config)

  -u USER  compile with permissions of USER (default for USER is portage).

  -Y       transfer X data using sudox (default with USER=portage and -x|-g)
  -X       do not transfer X data
  -T[pPfHsS-] pass option(s) to the title script; - means no title

  -c       Use ccache. The environment variables CCACHE_DIR and CCACHE_SIZE
           are interpreted as by portage.
           If USER=portage the default depends on FEATURES, and the default
           of all these three variables is read from portage.
  -C       Do not use ccache (default if USER is not portage).

  -a PARA  Add PARA to the make parameters. Typical example:
           -a 'CONFIG_DEBUG_SECTION_MISMATCH=y'
           This can be used successively.

  -o PATH  Use PATH as prefix for installation, e.g. install modules into
           PATH/lib/modules/...
           If this option is used, also the installation is done with the
           permissions of USER.

  -O PATH  As -o PATH but use root permissions for the installation."
	Exit ${1:-1}
}

remoteopt=
PushOpt() {
	Push remoteopt "${@}"
}

makeopts=
PushMake() {
	Push makeopts "${@}"
}

forceflag=false
oldconfig=false
configtype=
useccache=
xtransfer=
remoteuser=
prefixdir=
rootinstalls=:
titleopt=
OPTIND=1
while getopts 'fpnmgxNcCxXT:a:u:o:O:h?' opt
do	PushOpt "-${opt}"
	case ${opt} in
	f)	forceflag=:;;
	p)	oldconfig=:;;
	n)	configtype='nconfig';;
	x)	configtype='xconfig';;
	m)	configtype='menuconfig';;
	g)	configtype='gconfig';;
	N)	configtype='none';;
	c)	useccache=:;;
	C)	useccache=false;;
	Y)	xtransfer=:;;
	X)	xtransfer=false;;
	T)	PushOpt "${OPTARG}"
		titleopt=${titleopt}${OPTARG};;
	a)	PushOpt "${OPTARG}"
		PushMake "${OPTARG}";;
	u)	PushOpt "${OPTARG}"
		remoteuser=${OPTARG};;
	o)	PushOpt "${OPTARG}"
		prefixdir=${OPTARG}
		rootinstalls=false;;
	O)	PushOpt "${OPTARG}"
		prefixdir=${OPTARG};;
	*)	Usage 0;;
	esac
done
shift $(( ${OPTIND} - 1 ))

case ${titleopt} in
*[!pPfHsS-]*)
	Usage;;
esac

if [ -z "${remoteuser:++}" ]
then	remoteuser='portage'
	PushOpt '-u' "${remoteuser}"
fi

if [ -z "${xtransfer:++}" ] && case ${configtype} in
	[xg]*)	:;;
	*)	false;;
	esac
then	[ "${remoteuser}" = 'portage' ] && xtransfer=: || xtransfer=false
fi

: ${KERNEL_DIR:=/usr/src/linux}
: ${KBUILD_OUTPUT:=${KERNEL_DIR}}

test -d "${KERNEL_DIR}" || \
	Fatal "directory KERNEL_DIR=${KERNEL#DIR} does not exist"

Cd() {
	case ${1} in
	/*)	cd "${1}" >/dev/null 2>&1 || Fatal "cd ${1} failed";;
	*)	cd "./${1#./}" >/dev/null 2>&1 || Fatal "cd ${PWD}/${1#./} failed";;
	esac
}

Cd "${KERNEL_DIR}"

if [ "${KERNEL_DIR}" = "${KBUILD_OUTPUT}" ] || \
	[ "${PWD}" = "${KBUILD_OUTPUT}" ]
then	Fatal "This script should only be used if KBUILD_OUTPUT is set in the
environment and is a different directory than KERNEL_DIR, i.e. it must *not* be
	${KERNEL_DIR}
Note that setting KBUILD_OUTPUT should be done in the environment of root or
alternatively in /etc/make.conf (or /etc/portage/make.conf) so that portage
will honour it later when emerging kernel-related ebuilds."
fi

BackSpaceArg() {
	[ -z "${1:++}" ] && return
	bckspc=${1}
	bckspt=
	while [ -n "${bckspc:++}" ]
	do	bckspt=${bckspt}'\b \b'
		bckspc=${bckspc%?}
	done
	printf "${bckspt}"
}

quitstatus=0
Ask() {
	if ${forceflag}
	then	Echo "${*}."
		return 0
	fi
	Title '???'
	askt='(Yes/No/Rest/Quit) '
	Echon "${*}? ${askt}"
	while :
	do	oldtty=`stty -g`
		stty -icanon -echo
		askkey=`dd count=1 bs=1 2>/dev/null`
		stty ${oldtty}
		case ${askkey} in
		[yY]*)	BackSpaceArg "${askt}"
			Echo 'Yes'
			return 0;;
		[nN]*)	BackSpaceArg "${askt}"
			Echo 'No'
			return 1;;
		[rR]*)	BackSpaceArg "${askt}"
			Echo 'Rest'
			forceflag=:
			return 0;;
		[qQ]*)	BackSpaceArg "${askt}"
			Echo 'Quit'
			Exit ${quitstatus};;
		esac
	done
}

read_features=:
FeaturesHave() {
	if ${read_features}
	then	ReadVar FEATURES FEATURES
		read_features=false
	fi
	feature_have=1
	for feature in ${FEATURES}
	do	if [ "${feature}" = "${1}" ]
		then	feature_have=0
		elif [ "${feature}" = "-${1}" ]
		then	feature_have=1
		fi
	done
	return ${feature_have}
}

# The preparation parts which have to be done as root:

PrepAndRemote() {
	remoteUID=`id -u "${remoteuser}"` || Fatal "id -u ${remoteuser} failed"
	remoteGID=`id -g "${remoteuser}"` || Fatal "id -g ${remoteuser} failed"
	Info "Compiling scheduled for ${remoteuser} (${remoteUID}:${remoteGID})."
	if ${forceflag}
	then	passforce=false
	else	passforce=:
		Info '' 'You will get asked interactively at each step.' \
	'To avoid this, use option -f or reply on a question with r(est).' ''
	fi
	clr=:
	if test -d "${KBUILD_OUTPUT}"
	then	if Ask "Clean ${KBUILD_OUTPUT} (only partially: keep .config*)"
		then	(
				Cd "${KBUILD_OUTPUT}"
				set +f
				for i in .* *
				do	case ${i} in
					.|..|.config*)	continue;;
					esac
					test -r "${i}" || test -h "${i}" || continue
					rm -rf -- "${i}" || Fatal "cannot remove ${KBUILD_OUTPUT}/${i}"
				done
			) || Fatal "cleaning ${KBUILD_OUTPUT} failed"
			clr=false
		elif Ask "Remove and recreate ${KBUILD_OUTPUT} completely"
		then	rm -rf -- "${KBUILD_OUTPUT}" || Fatal "rm -rf ${KBUILD_OUTPUT} failed"
			clr=false
		fi
	else	clr=false
	fi
	if ! test -d "${KBUILD_OUTPUT}"
	then	install -d -o "${remoteUID}" -g "${remoteGID}" -- "${KBUILD_OUTPUT}" \
		|| Fatal "cannot create ${KBUILD_OUTPUT}"
	fi
	if [ -n "${prefixdir:++}" ] && ! test -d "${prefixdir}"
	then	if ${rootinstalls}
		then	install -d -- "${prefixdir}"
		else	install -d -o "${remoteUID}" -g "${remoteGID}" -- "${KBUILD_OUTPUT}"
		fi || Fatal "cannot create ${prefixdir}"
	fi
	if [ "${xtransfer}" != false ] && ! command -v sudox >/dev/null 2>&1
	then	Info 'Will not transfer X permissions as sudox is not in $PATH'
		xtransfer=false
	fi
	if [ -z "${xtransfer:++}" ] && Ask "Transfer X permissions using sudox"
	then	xtransfer=:
	else	xtransfer=false
	fi
	if [ "${remoteuser}" = 'portage' ]
	then	removex=:
	else	removex=false
	fi
	${forceflag} && ${passforce} && PushOpt '-f'
	${statusline} || PushOpt '-H'
	CalcNice
	SHELL=`command -v -- sh`
	Quote export "SHELL=${SHELL}"
	export SHELL
	PushOpt '--'
	eval "set -- ${remoteopt}"
	if ${xtransfer}
	then	QuoteExec ${nice} sudox -f "${remoteuser}" -- "${fullpath}" "${@}" 'remote' ${removex} ${clr}
	else	removex=false
		QuoteExec ${nice} sudo -u "${remoteuser}" -H -s -- "${fullpath}" "${@}" 'remote' ${removex} ${clr}
	fi && return
	rvalue=${?}
	[ ${rvalue} -eq ${magicquit} ] && Exit
	[ ${rvalue} -eq ${magicforce} ] && {
		forceflag=:
		return
	}
	Fatal "calling ${0##*/} as ${remoteuser} failed"
}

nonfatal=false
MyMake() {
	TitleInfo "make ${1}"
	eval "set -- ${ccopt} ${makeopts} \"\${@}\""
	QuoteExec make ${MAKEOPTS} -- O="${KBUILD_OUTPUT}" "${@}" && return
	${nonfatal} && return 1
	Fatal 'make' "${@}" 'failed'
}

CalcModuleName() {
	[ -n "${name:++}" ] && [ -n "${modulename:++}" ] && return
	name=`readlink -f -- "${KERNEL_DIR}"` || name=${KERNEL_DIR}
	name=${name##*/}
	name=${name#*-}
	[ -n "${name:++}" ] || name='unknown'
	modulename="${prefixdir}/lib/modules/${name}"
}

CalcKernelSystem() {
	CalcModuleName
	kernelname="kernel-${name}"
	systemname="${modulename}/System.map"
}

ReadCcacheConf() {
	if [ -z "${CCACHE_DIR:++}" ]
	then	ReadVar CCACHE_DIR CCACHE_DIR
		if [ -z "${CCACHE_DIR:++}" ]
		then	ReadVar CCACHE_DIR PORTAGE_TMPDIR
			CCACHE_DIR="${CCACHE_DIR:-/var/tmp}/ccache"
		fi
		export CCACHE_DIR
		Quote export "CCACHE_DIR=${CCACHE_DIR}"
	fi
	[ -n "${CCACHE_SIZE:++}" ] || ReadVar CCACHE_SIZE CCACHE_SIZE
	CCACHE_BASEDIR=${KERNEL_DIR%/*}
	export CCACHE_BASEDIR
	Quote export "CCACHE_BASEDIR=${CCACHE_BASEDIR}"
}

CalcCcache() {
	ccopt=
	${useccache:-:} || return 0
	if [ "${remoteuser}" = 'portage' ]
	then	if [ -z "${useccache:++}" ]
		then	if FeaturesHave 'ccache'
			then	! Ask "Use ccache"
			else	Ask "keep ccache disabled"
			fi && {
				useccache=false
				return 0
			}
			useccache=:
		fi
		ReadCcacheConf
	else	${useccache:-false} || return 0
	fi
	#Push ccopt 'CC=ccache gcc'
	Quote export "PATH=/usr/lib/ccache/bin${PATH:+:}${PATH}"
	PATH="/usr/lib/ccache/bin${PATH:+:}${PATH}"
	export PATH
	if [ -n "${CCACHE_SIZE:++}" ]
	then	Quote ccache -M "${CCACHE_SIZE}"
		ccache -M "${CCACHE_SIZE}" >/dev/null 2>&1
	fi
}

CalcNice() {
	if [ -n "${NICENESS++}" ]
	then	: ${NICENESS:=0}
	else	ReadVar NICENESS PORTAGE_NICENESS
	fi
	case ${NICENESS} in
	*[!0-9]*)	NICENESS=;;
	esac
	: ${NICENESS:=9}
	if [ "${NICENESS}" -le 0 ] || ! [ "`nice`" -eq 0 ]
	then	nice=
	else	nice="nice -n ${NICENESS} --"
	fi
	ReadVar PORTAGE_IONICE_COMMAND PORTAGE_IONICE_COMMAND
	: ${PORTAGE_IONICE_COMMAND=ionice -c 3}
	for niceadd in ${PORTAGE_IONICE_COMMAND} --
	do	case ${niceadd} in
		-p|*PID*)
			continue;;
		--*)
			:;;
		-*p*)
			nice=${nice}${nice:+ }${niceadd%p*}${niceadd#*p}
			false;;
		esac && nice=${nice}${nice:+ }${niceadd}
		[ "${niceadd}" = '--' ] && break
	done
}

CalcMakeopts() {
	[ -n "${MAKEOPTS++}" ] && return
	ReadVar mkopts MAKEOPTS
	for mkopt in ${mkopts}
	do	case ${mkopt} in
		V=*|--no-print-directory)	continue;;
		esac
		MAKEOPTS=${MAKEOPTS}${MAKEOPTS:+ }${mkopt}
	done
}

ConfigAskMake() {
	[ -n "${configtype:++}" ] && [ "${configtype}" != "${1}" ] && return
	Ask "${2}" && {
		MyMake "${1}" && configtype=${1}
		MyDiff
	}
}

CompileRemote() {
	TitleInfo 'prepare'
	removex=${1}
	shift
	clr=${1}

	CalcCcache
	CalcMakeopts

	Info "`gcc --version | head -n 1`"

	${clr} && Ask 'Use make mrproper (usually you do not want this)' && \
		MyMake mrproper

	${oldconfig} || \
		Ask 'Use make oldconfig (usually you do not want this)' && {
		MyMake oldconfig
		MyDiff
	}

	nonfatal=:
	ConfigAskMake nconfig 'Use make nconfig'
	ConfigAskMake xconfig 'Use make xconfig'
	ConfigAskMake menuconfig 'Use make menuconfig'
	ConfigAskMake gconfig 'Use make gconfig (this is ugly)'
	nonfatal=false

	if ${removex}
	then	rm -- "${HOME}/.Xauthority"
		[ "${remoteuser}" = 'portage' ] && rm -rf -- "${HOME}/.qt"
	fi
	test -f "${KBUILD_OUTPUT}/.config.old" && \
		Ask "remove ${KBUILD_OUTPUT}/.config.old" && \
		rm -- "${KBUILD_OUTPUT}/.config.old"

	if Ask 'Compile both, kernel and modules'
	then	MyMake
	else	Ask 'Compile kernel'  && MyMake bzImage
		Ask 'Compile modules' && MyMake modules
	fi
}

SetRootPerm() {
	chmod -- 644 "${1}"
	permstat=${?}
	if [ "${UID}" -eq 0 ]
	then	chown -- root:root "${1}" || permstat=${?}
	fi
	return ${permstat}
}

FixModules() {
	CalcModuleName
	rm -- "${modulename}/build" "${modulename}/source"
}

MoveKernel() {
	CalcKernelSystem "${1}"
	if Ask "Move kernel -> ${1}/${kernelname}"
	then	(
			set +f
			found=false
			for i in "${KBUILD_OUTPUT}"/arch/*/boot/bzImage
			do	test -r "${i}" || continue
				test -h "${i}" && continue
				found=:
				mv -- "${i}" "${1}/${kernelname}" \
					&& SetRootPerm "${1}/${kernelname}" \
					&& break
				Warning "moving ${i} failed"
			done
			${found} || Warning \
				"${KBUILD_OUTPUT}/arch/*/boot/bzImage not found"
		)
		test -f "${KBUILD_OUTPUT}/vmlinux" && rm -- "${KBUILD_OUTPUT}/vmlinux"
	fi
	Ask "Copy System.map -> ${systemname}" || return 0
	systemori="${KBUILD_OUTPUT}/System.map"
	cp -- "${systemori}" "${systemname}" \
		&& touch -r "${systemori}" -- "${systemname}" \
		&& SetRootPerm "${systemname}" \
		|| Warning 'copying System.map failed'
}

InstallIntoPrefix() {
	if Ask "Install modules to ${prefixdir}"
	then	MyMake INSTALL_MOD_PATH="${prefixdir}" modules_install
		FixModules
	fi
	MoveKernel "${prefixdir}"
}

# The installation which has to be done as root:

InstallAsRoot() {
	if [ -n "${prefixdir:++}" ]
	then	InstallIntoPrefix
		return
	fi
	if Ask 'Install modules'
	then	MyMake modules_install
		FixModules
	fi
	bootname='/boot'
	Cd "${bootname}"
	MoveKernel "${bootname}"
	if test -r 'bzImage' && Ask 'Set both, new and previous symlink'
	then	mv -- 'bzImage' 'bzImage.previous' \
			|| Warning "moving old bzImage failed"
		ln -s -- "${kernelname}" 'bzImage' \
			|| Fatal "setting new bzImage failed"
	elif Ask 'Set new symlink'
	then	ln -sf -- "${kernelname}" 'bzImage' \
			|| Fatal "setting new bzImage failed"
	fi
}

CalcTime() {
	result=
	for calctimea
	do	calctimeb=${calctimea:-0}
		[ "${calctimeb}" -gt 9 ] || calctimeb=0${calctimeb}
		result=${result}${result:+:}${calctimeb}
	done
}

FinishText() {
	if [ "${time_begin}" -gt 99 ]
	then	time_total=`date '+%s' 2>/dev/null` || time_total=
		if [ "${time_total}" -gt 99 ]
		then	time_seconds=$(( ${time_total} - ${time_begin} ))
			time_minutes=$(( ${time_seconds} / 60 ))
			CalcTime $(( ${time_seconds} / 3600 )) \
				$(( ${time_minutes} % 60 )) \
				$(( ${time_seconds} % 60 ))
			Echo "
Total time elapsed: ${result}"
		fi
	fi
	TitleInfo '@module-rebuild'
	Echo '
Do not forget to reemerge all packages containing kernel modules:

	emerge -1 @module-rebuild
'
	Exit ${?} 0
}

if [ ${#} -ne 0 ]
then	arg=${1}
	shift
elif [ -n "${remoteopt:++}" ]
then	arg='-'
fi

USER=`id -un`
UID=`id -u`
GID=`id -g`
case ${arg} in
-)
	Info "${0##*/}: called as ${USER} (${UID}:${GID})"
	[ "${UID}" -eq 0 ] && [ "${GID}" -eq 0 ] && [ "${USER}" = 'root' ] || {
		Warning 'this script should be called as root.'
	}
	time_begin=`date '+%s' 2>/dev/null` || time_begin=
	PrepAndRemote
	Info "Remote script finished; back to ${USER} (${UID}:${GID})"
	${rootinstalls} && InstallAsRoot
	FinishText;;
remote)
	Info "${0##*/}: called remotely as ${USER} (${UID}:${GID})"
	quitstatus=${magicquit}
	CompileRemote "${@}"
	${rootinstalls} || InstallIntoPrefix
	${forceflag} && Exit ${magicforce};;
*)
	Usage;;
esac
Exit 0
